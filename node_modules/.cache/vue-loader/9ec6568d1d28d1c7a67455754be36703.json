{"remainingRequest":"/Users/mazhongkai/Desktop/ebook 2/vue-ebook/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js??vue-loader-options!/Users/mazhongkai/Desktop/ebook 2/vue-ebook/src/components/ebook/EbookReader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mazhongkai/Desktop/ebook 2/vue-ebook/src/components/ebook/EbookReader.vue","mtime":1627017774869},{"path":"/Users/mazhongkai/Desktop/ebook 2/vue-ebook/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mazhongkai/Desktop/ebook 2/vue-ebook/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mazhongkai/Desktop/ebook 2/vue-ebook/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mazhongkai/Desktop/ebook 2/vue-ebook/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\n// 使用 mapGetters 来快速调用 vuex 中的对象\n// import { mapGetters } from 'vuex'\n// 引入 mixin.js 来代替 mapGetter mapActions（mixin.js 集中管理 mapGetters）\nimport { ebookMixin } from '../../utils/mixin';\n// 使用 mapActions 原理跟 mapGetters 差不多，mapActions是引入定义在vuex 中 actios 或者是独立出来的 actions.js 中的方法\n// 还是跟 mapGetters 一样，放入到 mixin.js 中集中管理\n// import { mapActions } from 'vuex'\n// 引入本次项目的核心 Epubjs\nimport Epub from 'epubjs';\n// 引入 book.js 中的 addCss 方法来帮助改变全局样式 initGlobalStyle(),由于需要在多个组件中使用，所以后期移入 mixin.js 中\n// import { addCss } from '../../utils/book';\n// 有关本地缓存的文件\nimport {\n  getFontFamily,\n  getFontSize,\n  getLocation,\n  getTheme,\n  saveFontFamily,\n  saveFontSize,\n  saveTheme\n} from '../../utils/localStorage';\nglobal.ePub = Epub;\n\nexport default {\n  // 使用 mixins 方法来引用引入进来的 mixin.js 中的自定义对象\n  mixins: [ebookMixin],\n  methods: {\n    // 使用 mapActions 来引入 actios.js 中的方法, 引入之后就可以直接使用 this.xx() 来使用xx方法\n    // 还是跟 mapGetters 一样，放入到 mixin.js 中集中管理\n    // ...mapActions(['setMenuVisible']),\n    // 向前翻页事件\n    prevPage() {\n      //  首先判断电子书是否存在，然后再执行\n      if (this.rendition) {\n        this.rendition.prev().then(() => {\n          this.refreshLocation();\n        });\n        // 引用 hideTitleAndMenu 方法来实现翻页隐藏菜单栏\n        this.hideTitleAndMenu();\n      }\n    },\n    // 向后翻页事件\n    nextPage() {\n      if (this.rendition) {\n        this.rendition.next().then(() => {\n          this.refreshLocation();\n        });\n        this.hideTitleAndMenu();\n      }\n    },\n    // 弹出菜单栏事件事件,通过 $store.dispatch 来调用在vuex 中定义的方法 setMenuVisible，后面引入了 mapActions 来引入方法，使用方法更加便捷。\n    // 将 actions 独立出来形成 actions.js 文件，使用 mixin.js 文件进行集中引入，最后引入 mixin.js 即可\n    toggleTitleAndMenu() {\n      this.setMenuVisible(!this.menuVisible);\n      // 在 toggleTitleAndMenu 事件触发时，如果 menu 弹出，则字体 SettingFont 不展示，直到点击触发 SetSettingVisible事件才弹出字号设置窗口\n      if (this.menuVisible) {\n        this.setSettingVisible(-1);\n      }\n      this.setFontFamilyVisible(false);\n    },\n    hideTitleAndMenu() {\n      this.setMenuVisible(false);\n      // 需求：隐藏菜单栏时，也同时收起 调节字号的菜单（EbookSettingFont）\n      this.setSettingVisible(-1);\n      // 需求：隐藏菜单栏时，也同时收起  font-family 弹出层\n      this.setFontFamilyVisible(false);\n    },\n    // 缓存的思路：在 localStorage.js 中定义 get 和 save 方法，先获取页面中的xxx，判断是否含有 xxx，如果没有，则获取 xxx 并保存 save（xxx），如果有，则改变页面的 xxx 属性，并且设置为默认为了缓存\n    // 缓存字号大小的方法，在 initEpub 方法中渲染出电子书后进行引用,\n    initFontSize() {\n      const fontSize = getFontSize(this.fileName);\n      if (!fontSize) {\n        saveFontSize(this.fileName, this.defaultFontSize);\n      } else {\n        this.rendition.themes.fontSize(fontSize);\n        this.setDefaultFontSize(fontSize);\n      }\n    },\n    // 缓存字体风格的方法，在 initEpub 方法中渲染出电子书后进行引用\n    initFontFamily() {\n      const fontFamily = getFontFamily(this.fileName);\n      if (!fontFamily) {\n        saveFontFamily(this.fileName, this.defaultFontFamily);\n      } else {\n        this.rendition.themes.font(fontFamily);\n        this.setDefaultFontFamily(fontFamily);\n      }\n    },\n    // 缓存主题的方法，在 initEpub 方法中渲染出电子书后进行引用\n    initTheme() {\n      let defaultTheme = getTheme(this.fileName);\n      if (!defaultTheme) {\n        defaultTheme = this.themeList[0].name;\n        saveTheme(this.fileName, defaultTheme);\n      }\n      this.setDefaultTheme(defaultTheme);\n      this.themeList.forEach((theme) => {\n        this.rendition.themes.register(theme.name, theme.style);\n      });\n      this.rendition.themes.select(defaultTheme);\n    },\n    // 渲染电子书的方法\n    initRendition() {\n      this.rendition = this.book.renderTo('read', {\n        width: innerWidth,\n        height: innerHeight,\n        //  加入微信的兼容性配置\n        // 由于部分的浏览器无法显示 把 epubjs 的版本改为0.3.71   cnpm i epubjs@0.3.71\n        method: 'default'\n      });\n      // 渲染电子书,并且添加一次初始化的渲染，记录下初始化的默认字体\\字号\\主题\n      const location = getLocation(this.fileName);\n      this.display(location, () => {\n        this.initTheme();\n        this.initFontFamily();\n        this.initFontSize();\n        this.initGlobalStyle();\n      });\n      this.rendition.hooks.content.register((contents) => {\n        Promise.all([\n          // 当加入来自.env.development 文件中的VUE_APP_RES_URL后，需要将整个程序重新加载一遍才能够看到效果\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/daysOne.css`\n          ),\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/cabin.css`\n          ),\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/montserrat.css`\n          ),\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/tangerine.css`\n          )\n        ]).then(() => {});\n      });\n    },\n    // 手势方法\n    initGesture() {\n      // 给电子书绑定屏幕的手势事件 touchstart ：触摸屏幕事件  touchend：离开屏幕事件\n      // 事件内部有属性可以操作，其中是 timeStamp可以用于认定长按属于无效操作，changedTouches 里面的第一个属性为 判断几根手指的操作，\n      // 第一个属性内部的 clientX 为水平方向的移动（根据变化来判断向左还是向右划动）\n      this.rendition.on('touchstart', (event) => {\n        this.touchstartX = event.changedTouches[0].clientX;\n        this.touchstartTime = event.timeStamp;\n      });\n      this.rendition.on('touchend', (event) => {\n        const offsetX = event.changedTouches[0].clientX - this.touchstartX;\n        const time = event.timeStamp - this.touchstartTime;\n        // console.log(offsetX, time);\n        // 需求：手指操作的事件不能大于 500 毫秒，划动的距离要大于 40\n        if (time < 500 && offsetX > 40) {\n          this.prevPage();\n        } else if (time < 500 && offsetX < -40) {\n          this.nextPage();\n        } else {\n          this.toggleTitleAndMenu();\n        }\n        // // 禁止事件的默认方法调用和传播\n        if (event.preventDefault) {\n          event.preventDefault();\n        }\n        event.stopPropagation();\n      });\n    },\n    initEpub() {\n      // 坑：之前设置 Nginx 时设置端口号为 8081\n      const url =\n        process.env.VUE_APP_RES_URL + '/epub/' + this.fileName + '.epub';\n      // console.log(url);\n      this.book = new Epub(url);\n      this.setCurrentBook(this.book);\n      this.initRendition();\n      this.initGesture();\n      // 在电子书全部解析之后调用 ready\n      this.book.ready\n        .then(() => {\n          return this.book.locations.generate(\n            750 * (window.innerWidth / 375) * (getFontSize(this.fileName) / 16)\n          );\n        })\n        .then(() => {\n          this.setBookAvailable(true);\n          this.refreshLocation();\n        });\n    }\n  },\n  // 使用生命周期函数中的 mounted 方法来获取动态路由 router.params.fileName\n  mounted() {\n    // const fileName = this.$route.params.fileName\n    // console.log(fileName);\n    // split 方法：以 xxx 为界限划分获取的结果\n    // join 方法：以 xxx 将获取的结果合并在一起\n    // const baseUrl = 'http://192.168.31.133:8081/epub/'\n    // const fileName = this.$route.params.fileName.split('|').join('/')\n    this.setFileName(this.$route.params.fileName.split('|').join('/')).then(\n      () => {\n        this.initEpub();\n      }\n    );\n  }\n};\n",{"version":3,"sources":["EbookReader.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EbookReader.vue","sourceRoot":"src/components/ebook","sourcesContent":["<!--用于接收动态路由的组件-->\n<template>\n  <div class=\"ebook-reader\">\n    <div id=\"read\"></div>\n  </div>\n</template>\n\n<script>\n// 使用 mapGetters 来快速调用 vuex 中的对象\n// import { mapGetters } from 'vuex'\n// 引入 mixin.js 来代替 mapGetter mapActions（mixin.js 集中管理 mapGetters）\nimport { ebookMixin } from '../../utils/mixin';\n// 使用 mapActions 原理跟 mapGetters 差不多，mapActions是引入定义在vuex 中 actios 或者是独立出来的 actions.js 中的方法\n// 还是跟 mapGetters 一样，放入到 mixin.js 中集中管理\n// import { mapActions } from 'vuex'\n// 引入本次项目的核心 Epubjs\nimport Epub from 'epubjs';\n// 引入 book.js 中的 addCss 方法来帮助改变全局样式 initGlobalStyle(),由于需要在多个组件中使用，所以后期移入 mixin.js 中\n// import { addCss } from '../../utils/book';\n// 有关本地缓存的文件\nimport {\n  getFontFamily,\n  getFontSize,\n  getLocation,\n  getTheme,\n  saveFontFamily,\n  saveFontSize,\n  saveTheme\n} from '../../utils/localStorage';\nglobal.ePub = Epub;\n\nexport default {\n  // 使用 mixins 方法来引用引入进来的 mixin.js 中的自定义对象\n  mixins: [ebookMixin],\n  methods: {\n    // 使用 mapActions 来引入 actios.js 中的方法, 引入之后就可以直接使用 this.xx() 来使用xx方法\n    // 还是跟 mapGetters 一样，放入到 mixin.js 中集中管理\n    // ...mapActions(['setMenuVisible']),\n    // 向前翻页事件\n    prevPage() {\n      //  首先判断电子书是否存在，然后再执行\n      if (this.rendition) {\n        this.rendition.prev().then(() => {\n          this.refreshLocation();\n        });\n        // 引用 hideTitleAndMenu 方法来实现翻页隐藏菜单栏\n        this.hideTitleAndMenu();\n      }\n    },\n    // 向后翻页事件\n    nextPage() {\n      if (this.rendition) {\n        this.rendition.next().then(() => {\n          this.refreshLocation();\n        });\n        this.hideTitleAndMenu();\n      }\n    },\n    // 弹出菜单栏事件事件,通过 $store.dispatch 来调用在vuex 中定义的方法 setMenuVisible，后面引入了 mapActions 来引入方法，使用方法更加便捷。\n    // 将 actions 独立出来形成 actions.js 文件，使用 mixin.js 文件进行集中引入，最后引入 mixin.js 即可\n    toggleTitleAndMenu() {\n      this.setMenuVisible(!this.menuVisible);\n      // 在 toggleTitleAndMenu 事件触发时，如果 menu 弹出，则字体 SettingFont 不展示，直到点击触发 SetSettingVisible事件才弹出字号设置窗口\n      if (this.menuVisible) {\n        this.setSettingVisible(-1);\n      }\n      this.setFontFamilyVisible(false);\n    },\n    hideTitleAndMenu() {\n      this.setMenuVisible(false);\n      // 需求：隐藏菜单栏时，也同时收起 调节字号的菜单（EbookSettingFont）\n      this.setSettingVisible(-1);\n      // 需求：隐藏菜单栏时，也同时收起  font-family 弹出层\n      this.setFontFamilyVisible(false);\n    },\n    // 缓存的思路：在 localStorage.js 中定义 get 和 save 方法，先获取页面中的xxx，判断是否含有 xxx，如果没有，则获取 xxx 并保存 save（xxx），如果有，则改变页面的 xxx 属性，并且设置为默认为了缓存\n    // 缓存字号大小的方法，在 initEpub 方法中渲染出电子书后进行引用,\n    initFontSize() {\n      const fontSize = getFontSize(this.fileName);\n      if (!fontSize) {\n        saveFontSize(this.fileName, this.defaultFontSize);\n      } else {\n        this.rendition.themes.fontSize(fontSize);\n        this.setDefaultFontSize(fontSize);\n      }\n    },\n    // 缓存字体风格的方法，在 initEpub 方法中渲染出电子书后进行引用\n    initFontFamily() {\n      const fontFamily = getFontFamily(this.fileName);\n      if (!fontFamily) {\n        saveFontFamily(this.fileName, this.defaultFontFamily);\n      } else {\n        this.rendition.themes.font(fontFamily);\n        this.setDefaultFontFamily(fontFamily);\n      }\n    },\n    // 缓存主题的方法，在 initEpub 方法中渲染出电子书后进行引用\n    initTheme() {\n      let defaultTheme = getTheme(this.fileName);\n      if (!defaultTheme) {\n        defaultTheme = this.themeList[0].name;\n        saveTheme(this.fileName, defaultTheme);\n      }\n      this.setDefaultTheme(defaultTheme);\n      this.themeList.forEach((theme) => {\n        this.rendition.themes.register(theme.name, theme.style);\n      });\n      this.rendition.themes.select(defaultTheme);\n    },\n    // 渲染电子书的方法\n    initRendition() {\n      this.rendition = this.book.renderTo('read', {\n        width: innerWidth,\n        height: innerHeight,\n        //  加入微信的兼容性配置\n        // 由于部分的浏览器无法显示 把 epubjs 的版本改为0.3.71   cnpm i epubjs@0.3.71\n        method: 'default'\n      });\n      // 渲染电子书,并且添加一次初始化的渲染，记录下初始化的默认字体\\字号\\主题\n      const location = getLocation(this.fileName);\n      this.display(location, () => {\n        this.initTheme();\n        this.initFontFamily();\n        this.initFontSize();\n        this.initGlobalStyle();\n      });\n      this.rendition.hooks.content.register((contents) => {\n        Promise.all([\n          // 当加入来自.env.development 文件中的VUE_APP_RES_URL后，需要将整个程序重新加载一遍才能够看到效果\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/daysOne.css`\n          ),\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/cabin.css`\n          ),\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/montserrat.css`\n          ),\n          contents.addStylesheet(\n            `${process.env.VUE_APP_RES_URL}/fonts/tangerine.css`\n          )\n        ]).then(() => {});\n      });\n    },\n    // 手势方法\n    initGesture() {\n      // 给电子书绑定屏幕的手势事件 touchstart ：触摸屏幕事件  touchend：离开屏幕事件\n      // 事件内部有属性可以操作，其中是 timeStamp可以用于认定长按属于无效操作，changedTouches 里面的第一个属性为 判断几根手指的操作，\n      // 第一个属性内部的 clientX 为水平方向的移动（根据变化来判断向左还是向右划动）\n      this.rendition.on('touchstart', (event) => {\n        this.touchstartX = event.changedTouches[0].clientX;\n        this.touchstartTime = event.timeStamp;\n      });\n      this.rendition.on('touchend', (event) => {\n        const offsetX = event.changedTouches[0].clientX - this.touchstartX;\n        const time = event.timeStamp - this.touchstartTime;\n        // console.log(offsetX, time);\n        // 需求：手指操作的事件不能大于 500 毫秒，划动的距离要大于 40\n        if (time < 500 && offsetX > 40) {\n          this.prevPage();\n        } else if (time < 500 && offsetX < -40) {\n          this.nextPage();\n        } else {\n          this.toggleTitleAndMenu();\n        }\n        // // 禁止事件的默认方法调用和传播\n        if (event.preventDefault) {\n          event.preventDefault();\n        }\n        event.stopPropagation();\n      });\n    },\n    initEpub() {\n      // 坑：之前设置 Nginx 时设置端口号为 8081\n      const url =\n        process.env.VUE_APP_RES_URL + '/epub/' + this.fileName + '.epub';\n      // console.log(url);\n      this.book = new Epub(url);\n      this.setCurrentBook(this.book);\n      this.initRendition();\n      this.initGesture();\n      // 在电子书全部解析之后调用 ready\n      this.book.ready\n        .then(() => {\n          return this.book.locations.generate(\n            750 * (window.innerWidth / 375) * (getFontSize(this.fileName) / 16)\n          );\n        })\n        .then(() => {\n          this.setBookAvailable(true);\n          this.refreshLocation();\n        });\n    }\n  },\n  // 使用生命周期函数中的 mounted 方法来获取动态路由 router.params.fileName\n  mounted() {\n    // const fileName = this.$route.params.fileName\n    // console.log(fileName);\n    // split 方法：以 xxx 为界限划分获取的结果\n    // join 方法：以 xxx 将获取的结果合并在一起\n    // const baseUrl = 'http://192.168.31.133:8081/epub/'\n    // const fileName = this.$route.params.fileName.split('|').join('/')\n    this.setFileName(this.$route.params.fileName.split('|').join('/')).then(\n      () => {\n        this.initEpub();\n      }\n    );\n  }\n};\n</script>\n\n<style scoped>\n</style>\n"]}]}